{"version":3,"file":"ListInput.jsx","sourceRoot":"","sources":["ListInput.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,MAAM,YAAY,CAAC;AAE5B,OAAO,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAC;AAevD,IAAM,SAAS,GAAG;IAChB,CAAC,wBAAwB,EAAE,sBAAsB,EAAE,eAAe,CAAC;IACnE,CAAC,wBAAwB,EAAE,wBAAwB,EAAE,eAAe,CAAC;IACrE,CAAC,KAAK,EAAE,IAAI,CAAC;CACd,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,SAAS,CAAC,EASjB;IARf,IAAA,EAAE,QAAA,EACF,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,eAAgB,EAAhB,OAAO,mBAAG,MAAM,KAAA,EAChB,QAAQ,cAAA,EACR,KAAK,WAAA,EACL,OAAO,aAAA,EACJ,UAAU,cARmB,0EASjC,CADc;IAEb,OAAO,CACL,CAAC,GAAG,CACF,SAAS,CAAC,CAAC,EAAE,CACX,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,EAChD,sBAAsB,CACvB,CAAC,CAEF;MAAA,CAAC,SAAS;YACR,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CACnC,CAAC,KAAK,CACJ,OAAO,CAAC,CAAC,EAAE,CAAC,CACZ,SAAS,CAAC,CAAC,gDAAgD,CAAC,CAE5D;YAAA,CAAC,SAAS,CAAE,CAAA,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,EAAE,IAAI,CAAC,CAClE;UAAA,EAAE,KAAK,CAAC,CACT,CAAC,CAAC,CAAC,CACF,CAAC,KAAK,CACJ,OAAO,CAAC,CAAC,EAAE,CAAC,CACZ,SAAS,CAAC,CACR,+DACF,CAAC,CAED;YAAA,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAChC;YAAA,CAAC,CAAC,CAAE,CAAA,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE,CAAA,EAAE,CAAC,CACpC;UAAA,EAAE,KAAK,CAAC,CACT,CAAC,CAEJ;;MAAA,CAAC,MAAM,CACL,EAAE,CAAC,CAAC,EAAE,CAAC,CACP,SAAS,CAAC,CAAC,EAAE,CACX,KAAK;YACH,CAAC,CAAC,iDAAiD;YACnD,CAAC,CAAC,oDAAoD,EACxD,6FAA6F,EAC7F,UAAU,CAAC,YAAY,CACxB,CAAC,CACF,IAAI,UAAU,CAAC,CACf,IAAI,QAAQ,CAAC,CAEb;QAAA,CAAC,MAAM,CACL,SAAS,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CACvC,KAAK,CAAC,EAAE,CACR,QAAQ,CACR,QAAQ,CAER;;QACF,EAAE,MAAM,CACR;QAAA,CAAC;;;YAGG,CACJ;QAAA,CAAC;;;;cAIK,CACR;MAAA,EAAE,MAAM,CACR;MAAA,CAAC,KAAK,IAAI,CACR,CAAC,GAAG,CAAC,SAAS,CAAC,qDAAqD,CAClE;UAAA,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAC3C;UAAA,CAAC,oBAAoB,CAAC,SAAS,CAAC,aAAa,EAC/C;QAAA,EAAE,GAAG,CAAC,CACP,CACH;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC","sourcesContent":["import cn from 'classnames';\nimport { FieldError } from 'react-hook-form';\nimport { IoCloseCircleOutline } from 'react-icons/io5';\n\ninterface ListInputProps {\n  id: string;\n  fieldName: string;\n  required?: boolean;\n  variant?: 'small' | 'full';\n\n  listId?: number;\n  register?: any;\n  error?: FieldError;\n\n  [x: string]: any;\n}\n\nconst ListTypes = [\n  ['Performed on the batch', 'Performed on samples', 'Not Performed'],\n  ['Performed in real time', 'Performed periodically', 'Not Performed'],\n  ['Yes', 'No'],\n];\n\nexport default function ListInput({\n  id,\n  fieldName,\n  required,\n  variant = 'full',\n  register,\n  error,\n  options,\n  ...attributes\n}: ListInputProps) {\n  return (\n    <div\n      className={cn(\n        variant === 'full' ? 'col-span-2' : 'col-span-1',\n        'w-full flex flex-col',\n      )}\n    >\n      {fieldName &&\n        (fieldName.split('\\n').length == 1 ? (\n          <label\n            htmlFor={id}\n            className={'block pb-2 text-xs font-semibold text-gray-800'}\n          >\n            {fieldName} {required && <span className=\"text-red-500\">*</span>}\n          </label>\n        ) : (\n          <label\n            htmlFor={id}\n            className={\n              'flex justify-between pb-2 text-xs font-semibold text-gray-800'\n            }\n          >\n            <p>{fieldName.split('\\n')[0]}</p>\n            <p> {fieldName.split('\\n')[1]} </p>\n          </label>\n        ))}\n\n      <select\n        id={id}\n        className={cn(\n          error\n            ? 'placeholder-red-300 text-red-400 border-red-300'\n            : 'placeholder-gray-500 text-gray-800 border-gray-300',\n          'border px-3 py-3 bg-transparent rounded text-sm focus:outline-none focus:border-primary-500',\n          attributes.InputBgColor,\n        )}\n        {...attributes}\n        {...register}\n      >\n        <option\n          className={cn(attributes.InputBgColor)}\n          value=\"\"\n          disabled\n          selected\n        >\n          Select an option\n        </option>\n        {/* {\n          options && options.map((option) => (\n            <option key={option.id} value={option.id}>\n        } */}\n        {/* {ListTypes[attributes?.listId].map((option, index) => (\n          <option key={option + index} value={option}>\n            {option}\n          </option>\n        ))} */}\n      </select>\n      {error && (\n        <div className=\"flex items-center justify-between pt-1 text-red-400\">\n          <p className=\"text-xs\">{'error.message'}</p>\n          <IoCloseCircleOutline className=\"w-4 h-4 m-0\" />\n        </div>\n      )}\n    </div>\n  );\n}\n"]}